var __defProp=Object.defineProperty,__defProps=Object.defineProperties,__getOwnPropDescs=Object.getOwnPropertyDescriptors,__getOwnPropSymbols=Object.getOwnPropertySymbols,__hasOwnProp=Object.prototype.hasOwnProperty,__propIsEnum=Object.prototype.propertyIsEnumerable;Reflect.get,Reflect.set;var __defNormalProp=(e,t,r)=>t in e?__defProp(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,__spreadValues=(e,t)=>{for(var r in t||(t={}))__hasOwnProp.call(t,r)&&__defNormalProp(e,r,t[r]);if(__getOwnPropSymbols)for(var r of __getOwnPropSymbols(t))__propIsEnum.call(t,r)&&__defNormalProp(e,r,t[r]);return e},__spreadProps=(e,t)=>__defProps(e,__getOwnPropDescs(t));function encodePacket(e){let t=s=>{if(s===null)r.write8(0);else if(typeof s=="boolean")r.write8(1),r.write8(+s);else if(typeof s=="number")r.write8(2),r.write32(s|0);else if(typeof s=="string")r.write8(3),r.write(encodeUTF8(s));else if(s instanceof Uint8Array)r.write8(4),r.write(s);else if(s instanceof Array){r.write8(5),r.write32(s.length);for(let c of s)t(c)}else{let c=Object.keys(s);r.write8(6),r.write32(c.length);for(let i of c)r.write(encodeUTF8(i)),t(s[i])}},r=new ByteBuffer;return r.write32(0),r.write32(e.id<<1|+!e.isRequest),t(e.value),writeUInt32LE(r.buf,r.len-4,0),r.buf.subarray(0,r.len)}function decodePacket(e){let t=()=>{switch(r.read8()){case 0:return null;case 1:return!!r.read8();case 2:return r.read32();case 3:return decodeUTF8(r.read());case 4:return r.read();case 5:{let n=r.read32(),p=[];for(let l=0;l<n;l++)p.push(t());return p}case 6:{let n=r.read32(),p={};for(let l=0;l<n;l++)p[decodeUTF8(r.read())]=t();return p}default:throw new Error("Invalid packet")}},r=new ByteBuffer(e),s=r.read32(),c=(s&1)==0;s>>>=1;let i=t();if(r.ptr!==e.length)throw new Error("Invalid packet");return{id:s,isRequest:c,value:i}}var ByteBuffer=class{constructor(e=new Uint8Array(1024)){this.buf=e,this.len=0,this.ptr=0}_write(e){if(this.len+e>this.buf.length){let t=new Uint8Array((this.len+e)*2);t.set(this.buf),this.buf=t}return this.len+=e,this.len-e}write8(e){let t=this._write(1);this.buf[t]=e}write32(e){let t=this._write(4);writeUInt32LE(this.buf,e,t)}write(e){let t=this._write(4+e.length);writeUInt32LE(this.buf,e.length,t),this.buf.set(e,t+4)}_read(e){if(this.ptr+e>this.buf.length)throw new Error("Invalid packet");return this.ptr+=e,this.ptr-e}read8(){return this.buf[this._read(1)]}read32(){return readUInt32LE(this.buf,this._read(4))}read(){let e=this.read32(),t=new Uint8Array(e),r=this._read(t.length);return t.set(this.buf.subarray(r,r+e)),t}},encodeUTF8,decodeUTF8;if(typeof TextEncoder!="undefined"&&typeof TextDecoder!="undefined"){let e=new TextEncoder,t=new TextDecoder;encodeUTF8=r=>e.encode(r),decodeUTF8=r=>t.decode(r)}else if(typeof Buffer!="undefined")encodeUTF8=e=>{let t=Buffer.from(e);return t instanceof Uint8Array||(t=new Uint8Array(t)),t},decodeUTF8=e=>{let{buffer:t,byteOffset:r,byteLength:s}=e;return Buffer.from(t,r,s).toString()};else throw new Error("No UTF-8 codec found");function readUInt32LE(e,t){return e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24}function writeUInt32LE(e,t,r){e[r++]=t,e[r++]=t>>8,e[r++]=t>>16,e[r++]=t>>24}function validateTarget(e){if(e+="",e.indexOf(",")>=0)throw new Error(`Invalid target: ${e}`);return e}var canBeAnything=()=>null,mustBeBoolean=e=>typeof e=="boolean"?null:"a boolean",mustBeBooleanOrObject=e=>typeof e=="boolean"||typeof e=="object"&&!Array.isArray(e)?null:"a boolean or an object",mustBeString=e=>typeof e=="string"?null:"a string",mustBeRegExp=e=>e instanceof RegExp?null:"a RegExp object",mustBeInteger=e=>typeof e=="number"&&e===(e|0)?null:"an integer",mustBeFunction=e=>typeof e=="function"?null:"a function",mustBeArray=e=>Array.isArray(e)?null:"an array",mustBeObject=e=>typeof e=="object"&&e!==null&&!Array.isArray(e)?null:"an object",mustBeArrayOrRecord=e=>typeof e=="object"&&e!==null?null:"an array or an object",mustBeObjectOrNull=e=>typeof e=="object"&&!Array.isArray(e)?null:"an object or null",mustBeStringOrBoolean=e=>typeof e=="string"||typeof e=="boolean"?null:"a string or a boolean",mustBeStringOrObject=e=>typeof e=="string"||typeof e=="object"&&e!==null&&!Array.isArray(e)?null:"a string or an object",mustBeStringOrArray=e=>typeof e=="string"||Array.isArray(e)?null:"a string or an array",mustBeStringOrUint8Array=e=>typeof e=="string"||e instanceof Uint8Array?null:"a string or a Uint8Array";function getFlag(e,t,r,s){let c=e[r];if(t[r+""]=!0,c===void 0)return;let i=s(c);if(i!==null)throw new Error(`"${r}" must be ${i}`);return c}function checkForInvalidFlags(e,t,r){for(let s in e)if(!(s in t))throw new Error(`Invalid option ${r}: "${s}"`)}function validateInitializeOptions(e){let t=Object.create(null),r=getFlag(e,t,"wasmURL",mustBeString),s=getFlag(e,t,"worker",mustBeBoolean);return checkForInvalidFlags(e,t,"in startService() call"),{wasmURL:r,worker:s}}function pushLogFlags(e,t,r,s,c){let i=getFlag(t,r,"color",mustBeBoolean),n=getFlag(t,r,"logLevel",mustBeString),p=getFlag(t,r,"logLimit",mustBeInteger);i!==void 0?e.push(`--color=${i}`):s&&e.push("--color=true"),e.push(`--log-level=${n||c}`),e.push(`--log-limit=${p||0}`)}function pushCommonFlags(e,t,r){let s=getFlag(t,r,"legalComments",mustBeString),c=getFlag(t,r,"sourceRoot",mustBeString),i=getFlag(t,r,"sourcesContent",mustBeBoolean),n=getFlag(t,r,"target",mustBeStringOrArray),p=getFlag(t,r,"format",mustBeString),l=getFlag(t,r,"globalName",mustBeString),m=getFlag(t,r,"minify",mustBeBoolean),k=getFlag(t,r,"minifySyntax",mustBeBoolean),D=getFlag(t,r,"minifyWhitespace",mustBeBoolean),A=getFlag(t,r,"minifyIdentifiers",mustBeBoolean),O=getFlag(t,r,"charset",mustBeString),L=getFlag(t,r,"treeShaking",mustBeBoolean),Y=getFlag(t,r,"ignoreAnnotations",mustBeBoolean),J=getFlag(t,r,"jsx",mustBeString),Q=getFlag(t,r,"jsxFactory",mustBeString),H=getFlag(t,r,"jsxFragment",mustBeString),Z=getFlag(t,r,"define",mustBeObject),ee=getFlag(t,r,"pure",mustBeArray),ne=getFlag(t,r,"keepNames",mustBeBoolean);if(s&&e.push(`--legal-comments=${s}`),c!==void 0&&e.push(`--source-root=${c}`),i!==void 0&&e.push(`--sources-content=${i}`),n&&(Array.isArray(n)?e.push(`--target=${Array.from(n).map(validateTarget).join(",")}`):e.push(`--target=${validateTarget(n)}`)),p&&e.push(`--format=${p}`),l&&e.push(`--global-name=${l}`),m&&e.push("--minify"),k&&e.push("--minify-syntax"),D&&e.push("--minify-whitespace"),A&&e.push("--minify-identifiers"),O&&e.push(`--charset=${O}`),L!==void 0&&e.push(`--tree-shaking=${L}`),Y&&e.push("--ignore-annotations"),J&&e.push(`--jsx=${J}`),Q&&e.push(`--jsx-factory=${Q}`),H&&e.push(`--jsx-fragment=${H}`),Z)for(let G in Z){if(G.indexOf("=")>=0)throw new Error(`Invalid define: ${G}`);e.push(`--define:${G}=${Z[G]}`)}if(ee)for(let G of ee)e.push(`--pure:${G}`);ne&&e.push("--keep-names")}function flagsForBuildOptions(e,t,r,s,c){var i;let n=[],p=[],l=Object.create(null),m=null,k=null,D=null;pushLogFlags(n,t,l,r,s),pushCommonFlags(n,t,l);let A=getFlag(t,l,"sourcemap",mustBeStringOrBoolean),O=getFlag(t,l,"bundle",mustBeBoolean),L=getFlag(t,l,"watch",mustBeBooleanOrObject),Y=getFlag(t,l,"splitting",mustBeBoolean),J=getFlag(t,l,"preserveSymlinks",mustBeBoolean),Q=getFlag(t,l,"metafile",mustBeBoolean),H=getFlag(t,l,"outfile",mustBeString),Z=getFlag(t,l,"outdir",mustBeString),ee=getFlag(t,l,"outbase",mustBeString),ne=getFlag(t,l,"platform",mustBeString),G=getFlag(t,l,"tsconfig",mustBeString),ie=getFlag(t,l,"resolveExtensions",mustBeArray),ae=getFlag(t,l,"nodePaths",mustBeArray),oe=getFlag(t,l,"mainFields",mustBeArray),ce=getFlag(t,l,"conditions",mustBeArray),d=getFlag(t,l,"external",mustBeArray),u=getFlag(t,l,"loader",mustBeObject),a=getFlag(t,l,"outExtension",mustBeObject),f=getFlag(t,l,"publicPath",mustBeString),U=getFlag(t,l,"entryNames",mustBeString),T=getFlag(t,l,"chunkNames",mustBeString),_=getFlag(t,l,"assetNames",mustBeString),I=getFlag(t,l,"inject",mustBeArray),$=getFlag(t,l,"banner",mustBeObject),R=getFlag(t,l,"footer",mustBeObject),y=getFlag(t,l,"entryPoints",mustBeArrayOrRecord),C=getFlag(t,l,"absWorkingDir",mustBeString),E=getFlag(t,l,"stdin",mustBeObject),x=(i=getFlag(t,l,"write",mustBeBoolean))!=null?i:c,S=getFlag(t,l,"allowOverwrite",mustBeBoolean),g=getFlag(t,l,"incremental",mustBeBoolean)===!0;if(l.plugins=!0,checkForInvalidFlags(t,l,`in ${e}() call`),A&&n.push(`--sourcemap${A===!0?"":`=${A}`}`),O&&n.push("--bundle"),S&&n.push("--allow-overwrite"),L)if(n.push("--watch"),typeof L=="boolean")D={};else{let o=Object.create(null),w=getFlag(L,o,"onRebuild",mustBeFunction);checkForInvalidFlags(L,o,`on "watch" in ${e}() call`),D={onRebuild:w}}if(Y&&n.push("--splitting"),J&&n.push("--preserve-symlinks"),Q&&n.push("--metafile"),H&&n.push(`--outfile=${H}`),Z&&n.push(`--outdir=${Z}`),ee&&n.push(`--outbase=${ee}`),ne&&n.push(`--platform=${ne}`),G&&n.push(`--tsconfig=${G}`),ie){let o=[];for(let w of ie){if(w+="",w.indexOf(",")>=0)throw new Error(`Invalid resolve extension: ${w}`);o.push(w)}n.push(`--resolve-extensions=${o.join(",")}`)}if(f&&n.push(`--public-path=${f}`),U&&n.push(`--entry-names=${U}`),T&&n.push(`--chunk-names=${T}`),_&&n.push(`--asset-names=${_}`),oe){let o=[];for(let w of oe){if(w+="",w.indexOf(",")>=0)throw new Error(`Invalid main field: ${w}`);o.push(w)}n.push(`--main-fields=${o.join(",")}`)}if(ce){let o=[];for(let w of ce){if(w+="",w.indexOf(",")>=0)throw new Error(`Invalid condition: ${w}`);o.push(w)}n.push(`--conditions=${o.join(",")}`)}if(d)for(let o of d)n.push(`--external:${o}`);if($)for(let o in $){if(o.indexOf("=")>=0)throw new Error(`Invalid banner file type: ${o}`);n.push(`--banner:${o}=${$[o]}`)}if(R)for(let o in R){if(o.indexOf("=")>=0)throw new Error(`Invalid footer file type: ${o}`);n.push(`--footer:${o}=${R[o]}`)}if(I)for(let o of I)n.push(`--inject:${o}`);if(u)for(let o in u){if(o.indexOf("=")>=0)throw new Error(`Invalid loader extension: ${o}`);n.push(`--loader:${o}=${u[o]}`)}if(a)for(let o in a){if(o.indexOf("=")>=0)throw new Error(`Invalid out extension: ${o}`);n.push(`--out-extension:${o}=${a[o]}`)}if(y)if(Array.isArray(y))for(let o of y)p.push(["",o+""]);else for(let[o,w]of Object.entries(y))p.push([o+"",w+""]);if(E){let o=Object.create(null),w=getFlag(E,o,"contents",mustBeString),j=getFlag(E,o,"resolveDir",mustBeString),h=getFlag(E,o,"sourcefile",mustBeString),v=getFlag(E,o,"loader",mustBeString);checkForInvalidFlags(E,o,'in "stdin" object'),h&&n.push(`--sourcefile=${h}`),v&&n.push(`--loader=${v}`),j&&(k=j+""),m=w?w+"":""}let b=[];if(ae)for(let o of ae)o+="",b.push(o);return{entries:p,flags:n,write:x,stdinContents:m,stdinResolveDir:k,absWorkingDir:C,incremental:g,nodePaths:b,watch:D}}function flagsForTransformOptions(e,t,r,s){let c=[],i=Object.create(null);pushLogFlags(c,t,i,r,s),pushCommonFlags(c,t,i);let n=getFlag(t,i,"sourcemap",mustBeStringOrBoolean),p=getFlag(t,i,"tsconfigRaw",mustBeStringOrObject),l=getFlag(t,i,"sourcefile",mustBeString),m=getFlag(t,i,"loader",mustBeString),k=getFlag(t,i,"banner",mustBeString),D=getFlag(t,i,"footer",mustBeString);return checkForInvalidFlags(t,i,`in ${e}() call`),n&&c.push(`--sourcemap=${n===!0?"external":n}`),p&&c.push(`--tsconfig-raw=${typeof p=="string"?p:JSON.stringify(p)}`),l&&c.push(`--sourcefile=${l}`),m&&c.push(`--loader=${m}`),k&&c.push(`--banner=${k}`),D&&c.push(`--footer=${D}`),c}function createChannel(e){let t=new Map,r=new Map,s=new Map,c=new Map,i=0,n=!1,p=0,l=0,m=new Uint8Array(16*1024),k=0,D=d=>{let u=k+d.length;if(u>m.length){let f=new Uint8Array(u*2);f.set(m),m=f}m.set(d,k),k+=d.length;let a=0;for(;a+4<=k;){let f=readUInt32LE(m,a);if(a+4+f>k)break;a+=4,Q(m.subarray(a,a+f)),a+=f}a>0&&(m.copyWithin(0,a,k),k-=a)},A=()=>{n=!0;for(let d of t.values())d("The service was stopped",null);t.clear();for(let d of c.values())d.onWait("The service was stopped");c.clear();for(let d of s.values())try{d(new Error("The service was stopped"),null)}catch(u){console.error(u)}s.clear()},O=(d,u,a)=>{if(n)return a("The service is no longer running",null);let f=p++;t.set(f,(U,T)=>{try{a(U,T)}finally{d&&d.unref()}}),d&&d.ref(),e.writeToStdin(encodePacket({id:f,isRequest:!0,value:u}))},L=(d,u)=>{if(n)throw new Error("The service is no longer running");e.writeToStdin(encodePacket({id:d,isRequest:!1,value:u}))},Y=async(d,u)=>{try{switch(u.command){case"ping":{L(d,{});break}case"start":{let a=r.get(u.key);a?L(d,await a(u)):L(d,{});break}case"resolve":{let a=r.get(u.key);a?L(d,await a(u)):L(d,{});break}case"load":{let a=r.get(u.key);a?L(d,await a(u)):L(d,{});break}case"serve-request":{let a=c.get(u.serveID);a&&a.onRequest&&a.onRequest(u.args),L(d,{});break}case"serve-wait":{let a=c.get(u.serveID);a&&a.onWait(u.error),L(d,{});break}case"watch-rebuild":{let a=s.get(u.watchID);try{a&&a(null,u.args)}catch(f){console.error(f)}L(d,{});break}default:throw new Error("Invalid command: "+u.command)}}catch(a){L(d,{errors:[extractErrorMessageV8(a,e,null,void 0,"")]})}},J=!0,Q=d=>{if(J){J=!1;let a=String.fromCharCode(...d);if(a!=="0.13.11")throw new Error(`Cannot start service: Host version "0.13.11" does not match binary version ${JSON.stringify(a)}`);return}let u=decodePacket(d);if(u.isRequest)Y(u.id,u.value);else{let a=t.get(u.id);t.delete(u.id),u.value.error?a(u.value.error,{}):a(null,u.value)}},H=async(d,u,a,f)=>{let U=[],T=[],_={},I={},$=0,R=0,y=[];u=[...u];for(let S of u){let g={};if(typeof S!="object")throw new Error(`Plugin at index ${R} must be an object`);let b=getFlag(S,g,"name",mustBeString);if(typeof b!="string"||b==="")throw new Error(`Plugin at index ${R} is missing a name`);try{let o=getFlag(S,g,"setup",mustBeFunction);if(typeof o!="function")throw new Error("Plugin is missing a setup function");checkForInvalidFlags(S,g,`on plugin ${JSON.stringify(b)}`);let w={name:b,onResolve:[],onLoad:[]};R++;let j=o({initialOptions:d,onStart(h){let v='This error came from the "onStart" callback registered here',F=extractCallerV8(new Error(v),e,"onStart");U.push({name:b,callback:h,note:F})},onEnd(h){let v='This error came from the "onEnd" callback registered here',F=extractCallerV8(new Error(v),e,"onEnd");T.push({name:b,callback:h,note:F})},onResolve(h,v){let F='This error came from the "onResolve" callback registered here',N=extractCallerV8(new Error(F),e,"onResolve"),B={},V=getFlag(h,B,"filter",mustBeRegExp),W=getFlag(h,B,"namespace",mustBeString);if(checkForInvalidFlags(h,B,`in onResolve() call for plugin ${JSON.stringify(b)}`),V==null)throw new Error("onResolve() call is missing a filter");let M=$++;_[M]={name:b,callback:v,note:N},w.onResolve.push({id:M,filter:V.source,namespace:W||""})},onLoad(h,v){let F='This error came from the "onLoad" callback registered here',N=extractCallerV8(new Error(F),e,"onLoad"),B={},V=getFlag(h,B,"filter",mustBeRegExp),W=getFlag(h,B,"namespace",mustBeString);if(checkForInvalidFlags(h,B,`in onLoad() call for plugin ${JSON.stringify(b)}`),V==null)throw new Error("onLoad() call is missing a filter");let M=$++;I[M]={name:b,callback:v,note:N},w.onLoad.push({id:M,filter:V.source,namespace:W||""})}});j&&await j,y.push(w)}catch(o){return{ok:!1,error:o,pluginName:b}}}const C=async S=>{switch(S.command){case"start":{let g={errors:[],warnings:[]};return await Promise.all(U.map(async({name:b,callback:o,note:w})=>{try{let j=await o();if(j!=null){if(typeof j!="object")throw new Error(`Expected onStart() callback in plugin ${JSON.stringify(b)} to return an object`);let h={},v=getFlag(j,h,"errors",mustBeArray),F=getFlag(j,h,"warnings",mustBeArray);checkForInvalidFlags(j,h,`from onStart() callback in plugin ${JSON.stringify(b)}`),v!=null&&g.errors.push(...sanitizeMessages(v,"errors",f,b)),F!=null&&g.warnings.push(...sanitizeMessages(F,"warnings",f,b))}}catch(j){g.errors.push(extractErrorMessageV8(j,e,f,w&&w(),b))}})),g}case"resolve":{let g={},b="",o,w;for(let j of S.ids)try{({name:b,callback:o,note:w}=_[j]);let h=await o({path:S.path,importer:S.importer,namespace:S.namespace,resolveDir:S.resolveDir,kind:S.kind,pluginData:f.load(S.pluginData)});if(h!=null){if(typeof h!="object")throw new Error(`Expected onResolve() callback in plugin ${JSON.stringify(b)} to return an object`);let v={},F=getFlag(h,v,"pluginName",mustBeString),N=getFlag(h,v,"path",mustBeString),B=getFlag(h,v,"namespace",mustBeString),V=getFlag(h,v,"external",mustBeBoolean),W=getFlag(h,v,"sideEffects",mustBeBoolean),M=getFlag(h,v,"pluginData",canBeAnything),te=getFlag(h,v,"errors",mustBeArray),re=getFlag(h,v,"warnings",mustBeArray),P=getFlag(h,v,"watchFiles",mustBeArray),z=getFlag(h,v,"watchDirs",mustBeArray);checkForInvalidFlags(h,v,`from onResolve() callback in plugin ${JSON.stringify(b)}`),g.id=j,F!=null&&(g.pluginName=F),N!=null&&(g.path=N),B!=null&&(g.namespace=B),V!=null&&(g.external=V),W!=null&&(g.sideEffects=W),M!=null&&(g.pluginData=f.store(M)),te!=null&&(g.errors=sanitizeMessages(te,"errors",f,b)),re!=null&&(g.warnings=sanitizeMessages(re,"warnings",f,b)),P!=null&&(g.watchFiles=sanitizeStringArray(P,"watchFiles")),z!=null&&(g.watchDirs=sanitizeStringArray(z,"watchDirs"));break}}catch(h){return{id:j,errors:[extractErrorMessageV8(h,e,f,w&&w(),b)]}}return g}case"load":{let g={},b="",o,w;for(let j of S.ids)try{({name:b,callback:o,note:w}=I[j]);let h=await o({path:S.path,namespace:S.namespace,pluginData:f.load(S.pluginData)});if(h!=null){if(typeof h!="object")throw new Error(`Expected onLoad() callback in plugin ${JSON.stringify(b)} to return an object`);let v={},F=getFlag(h,v,"pluginName",mustBeString),N=getFlag(h,v,"contents",mustBeStringOrUint8Array),B=getFlag(h,v,"resolveDir",mustBeString),V=getFlag(h,v,"pluginData",canBeAnything),W=getFlag(h,v,"loader",mustBeString),M=getFlag(h,v,"errors",mustBeArray),te=getFlag(h,v,"warnings",mustBeArray),re=getFlag(h,v,"watchFiles",mustBeArray),P=getFlag(h,v,"watchDirs",mustBeArray);checkForInvalidFlags(h,v,`from onLoad() callback in plugin ${JSON.stringify(b)}`),g.id=j,F!=null&&(g.pluginName=F),N instanceof Uint8Array?g.contents=N:N!=null&&(g.contents=encodeUTF8(N)),B!=null&&(g.resolveDir=B),V!=null&&(g.pluginData=f.store(V)),W!=null&&(g.loader=W),M!=null&&(g.errors=sanitizeMessages(M,"errors",f,b)),te!=null&&(g.warnings=sanitizeMessages(te,"warnings",f,b)),re!=null&&(g.watchFiles=sanitizeStringArray(re,"watchFiles")),P!=null&&(g.watchDirs=sanitizeStringArray(P,"watchDirs"));break}}catch(h){return{id:j,errors:[extractErrorMessageV8(h,e,f,w&&w(),b)]}}return g}default:throw new Error("Invalid command: "+S.command)}};let E=(S,g,b)=>b();T.length>0&&(E=(S,g,b)=>{(async()=>{for(const{name:o,callback:w,note:j}of T)try{await w(S)}catch(h){S.errors.push(await new Promise(v=>g(h,o,j&&j(),v)))}})().then(b)});let x=0;return{ok:!0,requestPlugins:y,runOnEndCallbacks:E,pluginRefs:{ref(){++x==1&&r.set(a,C)},unref(){--x==0&&r.delete(a)}}}},Z=(d,u,a)=>{let f={},U=getFlag(u,f,"port",mustBeInteger),T=getFlag(u,f,"host",mustBeString),_=getFlag(u,f,"servedir",mustBeString),I=getFlag(u,f,"onRequest",mustBeFunction),$=i++,R,y=new Promise((C,E)=>{R=x=>{c.delete($),x!==null?E(new Error(x)):C()}});return a.serve={serveID:$},checkForInvalidFlags(u,f,"in serve() call"),U!==void 0&&(a.serve.port=U),T!==void 0&&(a.serve.host=T),_!==void 0&&(a.serve.servedir=_),c.set($,{onRequest:I,onWait:R}),{wait:y,stop(){O(d,{command:"serve-stop",serveID:$},()=>{})}}};const ee="warning",ne="silent";let G=d=>{let u=l++;const a=createObjectStash();let f,{refs:U,options:T,isTTY:_,callback:I}=d;if(typeof T=="object"){let y=T.plugins;if(y!==void 0){if(!Array.isArray(y))throw new Error('"plugins" must be an array');f=y}}let $=(y,C,E,x)=>{let S=[];try{pushLogFlags(S,T,{},_,ee)}catch(b){}const g=extractErrorMessageV8(y,e,a,E,C);O(U,{command:"error",flags:S,error:g},()=>{g.detail=a.load(g.detail),x(g)})},R=(y,C)=>{$(y,C,void 0,E=>{I(failureErrorWithLog("Build failed",[E],[]),null)})};if(f&&f.length>0){if(e.isSync)return R(new Error("Cannot use plugins in synchronous API calls"),"");H(T,f,u,a).then(y=>{if(!y.ok)R(y.error,y.pluginName);else try{ie(__spreadProps(__spreadValues({},d),{key:u,details:a,logPluginError:$,requestPlugins:y.requestPlugins,runOnEndCallbacks:y.runOnEndCallbacks,pluginRefs:y.pluginRefs}))}catch(C){R(C,"")}},y=>R(y,""))}else try{ie(__spreadProps(__spreadValues({},d),{key:u,details:a,logPluginError:$,requestPlugins:null,runOnEndCallbacks:(y,C,E)=>E(),pluginRefs:null}))}catch(y){R(y,"")}},ie=({callName:d,refs:u,serveOptions:a,options:f,isTTY:U,defaultWD:T,callback:_,key:I,details:$,logPluginError:R,requestPlugins:y,runOnEndCallbacks:C,pluginRefs:E})=>{const x={ref(){E&&E.ref(),u&&u.ref()},unref(){E&&E.unref(),u&&u.unref()}};let S=!e.isBrowser,{entries:g,flags:b,write:o,stdinContents:w,stdinResolveDir:j,absWorkingDir:h,incremental:v,nodePaths:F,watch:N}=flagsForBuildOptions(d,f,U,ee,S),B={command:"build",key:I,entries:g,flags:b,write:o,stdinContents:w,stdinResolveDir:j,absWorkingDir:h||T,incremental:v,nodePaths:F};y&&(B.plugins=y);let V=a&&Z(x,a,B),W,M,te=(P,z)=>{P.outputFiles&&(z.outputFiles=P.outputFiles.map(convertOutputFiles)),P.metafile&&(z.metafile=JSON.parse(P.metafile)),P.writeToStdout!==void 0&&console.log(decodeUTF8(P.writeToStdout).replace(/\n$/,""))},re=(P,z)=>{let q={errors:replaceDetailsInMessages(P.errors,$),warnings:replaceDetailsInMessages(P.warnings,$)};te(P,q),C(q,R,()=>{if(q.errors.length>0)return z(failureErrorWithLog("Build failed",q.errors,q.warnings),null);if(P.rebuildID!==void 0){if(!W){let X=!1;W=()=>new Promise((le,se)=>{if(X||n)throw new Error("Cannot rebuild");O(x,{command:"rebuild",rebuildID:P.rebuildID},(K,fe)=>{if(K)return z(failureErrorWithLog("Build failed",[{pluginName:"",text:K,location:null,notes:[],detail:void 0}],[]),null);re(fe,(ue,de)=>{ue?se(ue):le(de)})})}),x.ref(),W.dispose=()=>{X||(X=!0,O(x,{command:"rebuild-dispose",rebuildID:P.rebuildID},()=>{}),x.unref())}}q.rebuild=W}if(P.watchID!==void 0){if(!M){let X=!1;x.ref(),M=()=>{X||(X=!0,s.delete(P.watchID),O(x,{command:"watch-stop",watchID:P.watchID},()=>{}),x.unref())},N&&s.set(P.watchID,(le,se)=>{if(le){N.onRebuild&&N.onRebuild(le,null);return}let K={errors:replaceDetailsInMessages(se.errors,$),warnings:replaceDetailsInMessages(se.warnings,$)};te(se,K),C(K,R,()=>{if(K.errors.length>0){N.onRebuild&&N.onRebuild(failureErrorWithLog("Build failed",K.errors,K.warnings),null);return}se.rebuildID!==void 0&&(K.rebuild=W),K.stop=M,N.onRebuild&&N.onRebuild(null,K)})})}q.stop=M}z(null,q)})};if(o&&e.isBrowser)throw new Error('Cannot enable "write" in the browser');if(v&&e.isSync)throw new Error('Cannot use "incremental" with a synchronous build');if(N&&e.isSync)throw new Error('Cannot use "watch" with a synchronous build');O(x,B,(P,z)=>{if(P)return _(new Error(P),null);if(V){let q=z,X=!1;x.ref();let le={port:q.port,host:q.host,wait:V.wait,stop(){X||(X=!0,V.stop(),x.unref())}};return x.ref(),V.wait.then(x.unref,x.unref),_(null,le)}return re(z,_)})};return{readFromStdout:D,afterClose:A,service:{buildOrServe:G,transform:({callName:d,refs:u,input:a,options:f,isTTY:U,fs:T,callback:_})=>{const I=createObjectStash();let $=R=>{try{if(typeof a!="string")throw new Error('The input to "transform" must be a string');let y=flagsForTransformOptions(d,f,U,ne);O(u,{command:"transform",flags:y,inputFS:R!==null,input:R!==null?R:a},(E,x)=>{if(E)return _(new Error(E),null);let S=replaceDetailsInMessages(x.errors,I),g=replaceDetailsInMessages(x.warnings,I),b=1,o=()=>--b==0&&_(null,{warnings:g,code:x.code,map:x.map});if(S.length>0)return _(failureErrorWithLog("Transform failed",S,g),null);x.codeFS&&(b++,T.readFile(x.code,(w,j)=>{w!==null?_(w,null):(x.code=j,o())})),x.mapFS&&(b++,T.readFile(x.map,(w,j)=>{w!==null?_(w,null):(x.map=j,o())})),o()})}catch(y){let C=[];try{pushLogFlags(C,f,{},U,ne)}catch(x){}const E=extractErrorMessageV8(y,e,I,void 0,"");O(u,{command:"error",flags:C,error:E},()=>{E.detail=I.load(E.detail),_(failureErrorWithLog("Transform failed",[E],[]),null)})}};if(typeof a=="string"&&a.length>1024*1024){let R=$;$=()=>T.writeFile(a,R)}$(null)},formatMessages:({callName:d,refs:u,messages:a,options:f,callback:U})=>{let T=sanitizeMessages(a,"messages",null,"");if(!f)throw new Error(`Missing second argument in ${d}() call`);let _={},I=getFlag(f,_,"kind",mustBeString),$=getFlag(f,_,"color",mustBeBoolean),R=getFlag(f,_,"terminalWidth",mustBeInteger);if(checkForInvalidFlags(f,_,`in ${d}() call`),I===void 0)throw new Error(`Missing "kind" in ${d}() call`);if(I!=="error"&&I!=="warning")throw new Error(`Expected "kind" to be "error" or "warning" in ${d}() call`);let y={command:"format-msgs",messages:T,isWarning:I==="warning"};$!==void 0&&(y.color=$),R!==void 0&&(y.terminalWidth=R),O(u,y,(C,E)=>{if(C)return U(new Error(C),null);U(null,E.messages)})},analyzeMetafile:({callName:d,refs:u,metafile:a,options:f,callback:U})=>{f===void 0&&(f={});let T={},_=getFlag(f,T,"color",mustBeBoolean),I=getFlag(f,T,"verbose",mustBeBoolean);checkForInvalidFlags(f,T,`in ${d}() call`);let $={command:"analyze-metafile",metafile:a};_!==void 0&&($.color=_),I!==void 0&&($.verbose=I),O(u,$,(R,y)=>{if(R)return U(new Error(R),null);U(null,y.result)})}}}}function createObjectStash(){const e=new Map;let t=0;return{load(r){return e.get(r)},store(r){if(r===void 0)return-1;const s=t++;return e.set(s,r),s}}}function extractCallerV8(e,t,r){let s,c=!1;return()=>{if(c)return s;c=!0;try{let i=(e.stack+"").split(`
`);i.splice(1,1);let n=parseStackLinesV8(t,i,r);if(n)return s={text:e.message,location:n},s}catch(i){}}}function extractErrorMessageV8(e,t,r,s,c){let i="Internal error",n=null;try{i=(e&&e.message||e)+""}catch(p){}try{n=parseStackLinesV8(t,(e.stack+"").split(`
`),"")}catch(p){}return{pluginName:c,text:i,location:n,notes:s?[s]:[],detail:r?r.store(e):-1}}function parseStackLinesV8(e,t,r){let s="    at ";if(e.readFileSync&&!t[0].startsWith(s)&&t[1].startsWith(s))for(let c=1;c<t.length;c++){let i=t[c];if(!!i.startsWith(s))for(i=i.slice(s.length);;){let n=/^(?:new |async )?\S+ \((.*)\)$/.exec(i);if(n){i=n[1];continue}if(n=/^eval at \S+ \((.*)\)(?:, \S+:\d+:\d+)?$/.exec(i),n){i=n[1];continue}if(n=/^(\S+):(\d+):(\d+)$/.exec(i),n){let p;try{p=e.readFileSync(n[1],"utf8")}catch(D){break}let l=p.split(/\r\n|\r|\n|\u2028|\u2029/)[+n[2]-1]||"",m=+n[3]-1,k=l.slice(m,m+r.length)===r?r.length:0;return{file:n[1],namespace:"file",line:+n[2],column:encodeUTF8(l.slice(0,m)).length,length:encodeUTF8(l.slice(m,m+k)).length,lineText:l+`
`+t.slice(1).join(`
`),suggestion:""}}break}}return null}function failureErrorWithLog(e,t,r){let s=5,c=t.length<1?"":` with ${t.length} error${t.length<2?"":"s"}:`+t.slice(0,s+1).map((n,p)=>{if(p===s)return`
...`;if(!n.location)return`
error: ${n.text}`;let{file:l,line:m,column:k}=n.location,D=n.pluginName?`[plugin: ${n.pluginName}] `:"";return`
${l}:${m}:${k}: error: ${D}${n.text}`}).join(""),i=new Error(`${e}${c}`);return i.errors=t,i.warnings=r,i}function replaceDetailsInMessages(e,t){for(const r of e)r.detail=t.load(r.detail);return e}function sanitizeLocation(e,t){if(e==null)return null;let r={},s=getFlag(e,r,"file",mustBeString),c=getFlag(e,r,"namespace",mustBeString),i=getFlag(e,r,"line",mustBeInteger),n=getFlag(e,r,"column",mustBeInteger),p=getFlag(e,r,"length",mustBeInteger),l=getFlag(e,r,"lineText",mustBeString),m=getFlag(e,r,"suggestion",mustBeString);return checkForInvalidFlags(e,r,t),{file:s||"",namespace:c||"",line:i||0,column:n||0,length:p||0,lineText:l||"",suggestion:m||""}}function sanitizeMessages(e,t,r,s){let c=[],i=0;for(const n of e){let p={},l=getFlag(n,p,"pluginName",mustBeString),m=getFlag(n,p,"text",mustBeString),k=getFlag(n,p,"location",mustBeObjectOrNull),D=getFlag(n,p,"notes",mustBeArray),A=getFlag(n,p,"detail",canBeAnything),O=`in element ${i} of "${t}"`;checkForInvalidFlags(n,p,O);let L=[];if(D)for(const Y of D){let J={},Q=getFlag(Y,J,"text",mustBeString),H=getFlag(Y,J,"location",mustBeObjectOrNull);checkForInvalidFlags(Y,J,O),L.push({text:Q||"",location:sanitizeLocation(H,O)})}c.push({pluginName:l||s,text:m||"",location:sanitizeLocation(k,O),notes:L,detail:r?r.store(A):-1}),i++}return c}function sanitizeStringArray(e,t){const r=[];for(const s of e){if(typeof s!="string")throw new Error(`${JSON.stringify(t)} must be an array of strings`);r.push(s)}return r}function convertOutputFiles({path:e,contents:t}){let r=null;return{path:e,contents:t,get text(){return r===null&&(r=decodeUTF8(t)),r}}}var build=e=>ensureServiceIsRunning().build(e),initializePromise,longLivedService,ensureServiceIsRunning=()=>{if(longLivedService)return longLivedService;throw initializePromise?new Error('You need to wait for the promise returned from "initialize" to be resolved before calling this'):new Error('You need to call "initialize" before calling this')},initialize=e=>{e=validateInitializeOptions(e||{});let t=e.wasmURL,r=e.worker!==!1;if(!t)throw new Error('Must provide the "wasmURL" option');if(t+="",initializePromise)throw new Error('Cannot call "initialize" more than once');return initializePromise=startRunningService(t,r),initializePromise.catch(()=>{initializePromise=void 0}),initializePromise},startRunningService=async(e,t)=>{let r=await fetch(e);if(!r.ok)throw new Error(`Failed to download ${JSON.stringify(e)}`);let s=await r.arrayBuffer(),c=`{let global={};for(let o=self;o;o=Object.getPrototypeOf(o))for(let k of Object.getOwnPropertyNames(o))if(!(k in global))Object.defineProperty(global,k,{get:()=>self[k]});// Copyright 2018 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

(() => {
	// Map multiple JavaScript environments to a single common API,
	// preferring web standards over Node.js API.
	//
	// Environments considered:
	// - Browsers
	// - Node.js
	// - Electron
	// - Parcel
	// - Webpack

	if (typeof global !== "undefined") {
		// global already exists
	} else if (typeof window !== "undefined") {
		window.global = window;
	} else if (typeof self !== "undefined") {
		self.global = self;
	} else {
		throw new Error("cannot export Go (neither global, window nor self is defined)");
	}

	if (!global.require && typeof require !== "undefined") {
		global.require = require;
	}

	if (!global.fs && global.require) {
		const fs = require("fs");
		if (typeof fs === "object" && fs !== null && Object.keys(fs).length !== 0) {
			
    global.fs = Object.assign({}, fs, {
      // Hack around a Unicode bug in node: https://github.com/nodejs/node/issues/24550
      write(fd, buf, offset, length, position, callback) {
        if (offset === 0 && length === buf.length && position === null) {
          if (fd === process.stdout.fd) {
            try {
              process.stdout.write(buf, err => err ? callback(err, 0, null) : callback(null, length, buf));
            } catch (err) {
              callback(err, 0, null);
            }
            return;
          }
          if (fd === process.stderr.fd) {
            try {
              process.stderr.write(buf, err => err ? callback(err, 0, null) : callback(null, length, buf));
            } catch (err) {
              callback(err, 0, null);
            }
            return;
          }
        }
        fs.write(fd, buf, offset, length, position, callback);
      },
    });
  
		}
	}

	const enosys = () => {
		const err = new Error("not implemented");
		err.code = "ENOSYS";
		return err;
	};

	if (!global.fs) {
		let outputBuf = "";
		global.fs = {
			constants: { O_WRONLY: -1, O_RDWR: -1, O_CREAT: -1, O_TRUNC: -1, O_APPEND: -1, O_EXCL: -1 }, // unused
			writeSync(fd, buf) {
				outputBuf += decoder.decode(buf);
				const nl = outputBuf.lastIndexOf("\\n");
				if (nl != -1) {
					console.log(outputBuf.substr(0, nl));
					outputBuf = outputBuf.substr(nl + 1);
				}
				return buf.length;
			},
			write(fd, buf, offset, length, position, callback) {
				if (offset !== 0 || length !== buf.length || position !== null) {
					callback(enosys());
					return;
				}
				const n = this.writeSync(fd, buf);
				callback(null, n);
			},
			chmod(path, mode, callback) { callback(enosys()); },
			chown(path, uid, gid, callback) { callback(enosys()); },
			close(fd, callback) { callback(enosys()); },
			fchmod(fd, mode, callback) { callback(enosys()); },
			fchown(fd, uid, gid, callback) { callback(enosys()); },
			fstat(fd, callback) { callback(enosys()); },
			fsync(fd, callback) { callback(null); },
			ftruncate(fd, length, callback) { callback(enosys()); },
			lchown(path, uid, gid, callback) { callback(enosys()); },
			link(path, link, callback) { callback(enosys()); },
			lstat(path, callback) { callback(enosys()); },
			mkdir(path, perm, callback) { callback(enosys()); },
			open(path, flags, mode, callback) { callback(enosys()); },
			read(fd, buffer, offset, length, position, callback) { callback(enosys()); },
			readdir(path, callback) { callback(enosys()); },
			readlink(path, callback) { callback(enosys()); },
			rename(from, to, callback) { callback(enosys()); },
			rmdir(path, callback) { callback(enosys()); },
			stat(path, callback) { callback(enosys()); },
			symlink(path, link, callback) { callback(enosys()); },
			truncate(path, length, callback) { callback(enosys()); },
			unlink(path, callback) { callback(enosys()); },
			utimes(path, atime, mtime, callback) { callback(enosys()); },
		};
	}

	if (!global.process) {
		global.process = {
			getuid() { return -1; },
			getgid() { return -1; },
			geteuid() { return -1; },
			getegid() { return -1; },
			getgroups() { throw enosys(); },
			pid: -1,
			ppid: -1,
			umask() { throw enosys(); },
			cwd() { throw enosys(); },
			chdir() { throw enosys(); },
		}
	}

	if (!global.crypto && global.require) {
		const nodeCrypto = require("crypto");
		global.crypto = {
			getRandomValues(b) {
				nodeCrypto.randomFillSync(b);
			},
		};
	}
	if (!global.crypto) {
		throw new Error("global.crypto is not available, polyfill required (getRandomValues only)");
	}

	if (!global.performance) {
		global.performance = {
			now() {
				const [sec, nsec] = process.hrtime();
				return sec * 1000 + nsec / 1000000;
			},
		};
	}

	if (!global.TextEncoder && global.require) {
		global.TextEncoder = require("util").TextEncoder;
	}
	if (!global.TextEncoder) {
		throw new Error("global.TextEncoder is not available, polyfill required");
	}

	if (!global.TextDecoder && global.require) {
		global.TextDecoder = require("util").TextDecoder;
	}
	if (!global.TextDecoder) {
		throw new Error("global.TextDecoder is not available, polyfill required");
	}

	// End of polyfills for common API.

	const encoder = new TextEncoder("utf-8");
	const decoder = new TextDecoder("utf-8");

	global.Go = class {
		constructor() {
			this.argv = ["js"];
			this.env = {};
			this.exit = (code) => {
				if (code !== 0) {
					console.warn("exit code:", code);
				}
			};
			this._exitPromise = new Promise((resolve) => {
				this._resolveExitPromise = resolve;
			});
			this._pendingEvent = null;
			this._scheduledTimeouts = new Map();
			this._nextCallbackTimeoutID = 1;

			const setInt64 = (addr, v) => {
				this.mem.setUint32(addr + 0, v, true);
				this.mem.setUint32(addr + 4, Math.floor(v / 4294967296), true);
			}

			const getInt64 = (addr) => {
				const low = this.mem.getUint32(addr + 0, true);
				const high = this.mem.getInt32(addr + 4, true);
				return low + high * 4294967296;
			}

			const loadValue = (addr) => {
				const f = this.mem.getFloat64(addr, true);
				if (f === 0) {
					return undefined;
				}
				if (!isNaN(f)) {
					return f;
				}

				const id = this.mem.getUint32(addr, true);
				return this._values[id];
			}

			const storeValue = (addr, v) => {
				const nanHead = 0x7FF80000;

				if (typeof v === "number" && v !== 0) {
					if (isNaN(v)) {
						this.mem.setUint32(addr + 4, nanHead, true);
						this.mem.setUint32(addr, 0, true);
						return;
					}
					this.mem.setFloat64(addr, v, true);
					return;
				}

				if (v === undefined) {
					this.mem.setFloat64(addr, 0, true);
					return;
				}

				let id = this._ids.get(v);
				if (id === undefined) {
					id = this._idPool.pop();
					if (id === undefined) {
						id = this._values.length;
					}
					this._values[id] = v;
					this._goRefCounts[id] = 0;
					this._ids.set(v, id);
				}
				this._goRefCounts[id]++;
				let typeFlag = 0;
				switch (typeof v) {
					case "object":
						if (v !== null) {
							typeFlag = 1;
						}
						break;
					case "string":
						typeFlag = 2;
						break;
					case "symbol":
						typeFlag = 3;
						break;
					case "function":
						typeFlag = 4;
						break;
				}
				this.mem.setUint32(addr + 4, nanHead | typeFlag, true);
				this.mem.setUint32(addr, id, true);
			}

			const loadSlice = (addr) => {
				const array = getInt64(addr + 0);
				const len = getInt64(addr + 8);
				return new Uint8Array(this._inst.exports.mem.buffer, array, len);
			}

			const loadSliceOfValues = (addr) => {
				const array = getInt64(addr + 0);
				const len = getInt64(addr + 8);
				const a = new Array(len);
				for (let i = 0; i < len; i++) {
					a[i] = loadValue(array + i * 8);
				}
				return a;
			}

			const loadString = (addr) => {
				const saddr = getInt64(addr + 0);
				const len = getInt64(addr + 8);
				return decoder.decode(new DataView(this._inst.exports.mem.buffer, saddr, len));
			}

			const timeOrigin = Date.now() - performance.now();
			this.importObject = {
				go: {
					// Go's SP does not change as long as no Go code is running. Some operations (e.g. calls, getters and setters)
					// may synchronously trigger a Go event handler. This makes Go code get executed in the middle of the imported
					// function. A goroutine can switch to a new stack if the current stack is too small (see morestack function).
					// This changes the SP, thus we have to update the SP used by the imported function.

					// func wasmExit(code int32)
					"runtime.wasmExit": (sp) => {
						sp >>>= 0;
						const code = this.mem.getInt32(sp + 8, true);
						this.exited = true;
						delete this._inst;
						delete this._values;
						delete this._goRefCounts;
						delete this._ids;
						delete this._idPool;
						this.exit(code);
					},

					// func wasmWrite(fd uintptr, p unsafe.Pointer, n int32)
					"runtime.wasmWrite": (sp) => {
						sp >>>= 0;
						const fd = getInt64(sp + 8);
						const p = getInt64(sp + 16);
						const n = this.mem.getInt32(sp + 24, true);
						fs.writeSync(fd, new Uint8Array(this._inst.exports.mem.buffer, p, n));
					},

					// func resetMemoryDataView()
					"runtime.resetMemoryDataView": (sp) => {
						sp >>>= 0;
						this.mem = new DataView(this._inst.exports.mem.buffer);
					},

					// func nanotime1() int64
					"runtime.nanotime1": (sp) => {
						sp >>>= 0;
						setInt64(sp + 8, (timeOrigin + performance.now()) * 1000000);
					},

					// func walltime() (sec int64, nsec int32)
					"runtime.walltime": (sp) => {
						sp >>>= 0;
						const msec = (new Date).getTime();
						setInt64(sp + 8, msec / 1000);
						this.mem.setInt32(sp + 16, (msec % 1000) * 1000000, true);
					},

					// func scheduleTimeoutEvent(delay int64) int32
					"runtime.scheduleTimeoutEvent": (sp) => {
						sp >>>= 0;
						const id = this._nextCallbackTimeoutID;
						this._nextCallbackTimeoutID++;
						this._scheduledTimeouts.set(id, setTimeout(
							() => {
								this._resume();
								while (this._scheduledTimeouts.has(id)) {
									// for some reason Go failed to register the timeout event, log and try again
									// (temporary workaround for https://github.com/golang/go/issues/28975)
									console.warn("scheduleTimeoutEvent: missed timeout event");
									this._resume();
								}
							},
							getInt64(sp + 8) + 1, // setTimeout has been seen to fire up to 1 millisecond early
						));
						this.mem.setInt32(sp + 16, id, true);
					},

					// func clearTimeoutEvent(id int32)
					"runtime.clearTimeoutEvent": (sp) => {
						sp >>>= 0;
						const id = this.mem.getInt32(sp + 8, true);
						clearTimeout(this._scheduledTimeouts.get(id));
						this._scheduledTimeouts.delete(id);
					},

					// func getRandomData(r []byte)
					"runtime.getRandomData": (sp) => {
						sp >>>= 0;
						crypto.getRandomValues(loadSlice(sp + 8));
					},

					// func finalizeRef(v ref)
					"syscall/js.finalizeRef": (sp) => {
						sp >>>= 0;
						const id = this.mem.getUint32(sp + 8, true);
						this._goRefCounts[id]--;
						if (this._goRefCounts[id] === 0) {
							const v = this._values[id];
							this._values[id] = null;
							this._ids.delete(v);
							this._idPool.push(id);
						}
					},

					// func stringVal(value string) ref
					"syscall/js.stringVal": (sp) => {
						sp >>>= 0;
						storeValue(sp + 24, loadString(sp + 8));
					},

					// func valueGet(v ref, p string) ref
					"syscall/js.valueGet": (sp) => {
						sp >>>= 0;
						const result = Reflect.get(loadValue(sp + 8), loadString(sp + 16));
						sp = this._inst.exports.getsp() >>> 0; // see comment above
						storeValue(sp + 32, result);
					},

					// func valueSet(v ref, p string, x ref)
					"syscall/js.valueSet": (sp) => {
						sp >>>= 0;
						Reflect.set(loadValue(sp + 8), loadString(sp + 16), loadValue(sp + 32));
					},

					// func valueDelete(v ref, p string)
					"syscall/js.valueDelete": (sp) => {
						sp >>>= 0;
						Reflect.deleteProperty(loadValue(sp + 8), loadString(sp + 16));
					},

					// func valueIndex(v ref, i int) ref
					"syscall/js.valueIndex": (sp) => {
						sp >>>= 0;
						storeValue(sp + 24, Reflect.get(loadValue(sp + 8), getInt64(sp + 16)));
					},

					// valueSetIndex(v ref, i int, x ref)
					"syscall/js.valueSetIndex": (sp) => {
						sp >>>= 0;
						Reflect.set(loadValue(sp + 8), getInt64(sp + 16), loadValue(sp + 24));
					},

					// func valueCall(v ref, m string, args []ref) (ref, bool)
					"syscall/js.valueCall": (sp) => {
						sp >>>= 0;
						try {
							const v = loadValue(sp + 8);
							const m = Reflect.get(v, loadString(sp + 16));
							const args = loadSliceOfValues(sp + 32);
							const result = Reflect.apply(m, v, args);
							sp = this._inst.exports.getsp() >>> 0; // see comment above
							storeValue(sp + 56, result);
							this.mem.setUint8(sp + 64, 1);
						} catch (err) {
							sp = this._inst.exports.getsp() >>> 0; // see comment above
							storeValue(sp + 56, err);
							this.mem.setUint8(sp + 64, 0);
						}
					},

					// func valueInvoke(v ref, args []ref) (ref, bool)
					"syscall/js.valueInvoke": (sp) => {
						sp >>>= 0;
						try {
							const v = loadValue(sp + 8);
							const args = loadSliceOfValues(sp + 16);
							const result = Reflect.apply(v, undefined, args);
							sp = this._inst.exports.getsp() >>> 0; // see comment above
							storeValue(sp + 40, result);
							this.mem.setUint8(sp + 48, 1);
						} catch (err) {
							sp = this._inst.exports.getsp() >>> 0; // see comment above
							storeValue(sp + 40, err);
							this.mem.setUint8(sp + 48, 0);
						}
					},

					// func valueNew(v ref, args []ref) (ref, bool)
					"syscall/js.valueNew": (sp) => {
						sp >>>= 0;
						try {
							const v = loadValue(sp + 8);
							const args = loadSliceOfValues(sp + 16);
							const result = Reflect.construct(v, args);
							sp = this._inst.exports.getsp() >>> 0; // see comment above
							storeValue(sp + 40, result);
							this.mem.setUint8(sp + 48, 1);
						} catch (err) {
							sp = this._inst.exports.getsp() >>> 0; // see comment above
							storeValue(sp + 40, err);
							this.mem.setUint8(sp + 48, 0);
						}
					},

					// func valueLength(v ref) int
					"syscall/js.valueLength": (sp) => {
						sp >>>= 0;
						setInt64(sp + 16, parseInt(loadValue(sp + 8).length));
					},

					// valuePrepareString(v ref) (ref, int)
					"syscall/js.valuePrepareString": (sp) => {
						sp >>>= 0;
						const str = encoder.encode(String(loadValue(sp + 8)));
						storeValue(sp + 16, str);
						setInt64(sp + 24, str.length);
					},

					// valueLoadString(v ref, b []byte)
					"syscall/js.valueLoadString": (sp) => {
						sp >>>= 0;
						const str = loadValue(sp + 8);
						loadSlice(sp + 16).set(str);
					},

					// func valueInstanceOf(v ref, t ref) bool
					"syscall/js.valueInstanceOf": (sp) => {
						sp >>>= 0;
						this.mem.setUint8(sp + 24, (loadValue(sp + 8) instanceof loadValue(sp + 16)) ? 1 : 0);
					},

					// func copyBytesToGo(dst []byte, src ref) (int, bool)
					"syscall/js.copyBytesToGo": (sp) => {
						sp >>>= 0;
						const dst = loadSlice(sp + 8);
						const src = loadValue(sp + 32);
						if (!(src instanceof Uint8Array || src instanceof Uint8ClampedArray)) {
							this.mem.setUint8(sp + 48, 0);
							return;
						}
						const toCopy = src.subarray(0, dst.length);
						dst.set(toCopy);
						setInt64(sp + 40, toCopy.length);
						this.mem.setUint8(sp + 48, 1);
					},

					// func copyBytesToJS(dst ref, src []byte) (int, bool)
					"syscall/js.copyBytesToJS": (sp) => {
						sp >>>= 0;
						const dst = loadValue(sp + 8);
						const src = loadSlice(sp + 16);
						if (!(dst instanceof Uint8Array || dst instanceof Uint8ClampedArray)) {
							this.mem.setUint8(sp + 48, 0);
							return;
						}
						const toCopy = src.subarray(0, dst.length);
						dst.set(toCopy);
						setInt64(sp + 40, toCopy.length);
						this.mem.setUint8(sp + 48, 1);
					},

					"debug": (value) => {
						console.log(value);
					},
				}
			};
		}

		async run(instance) {
			if (!(instance instanceof WebAssembly.Instance)) {
				throw new Error("Go.run: WebAssembly.Instance expected");
			}
			this._inst = instance;
			this.mem = new DataView(this._inst.exports.mem.buffer);
			this._values = [ // JS values that Go currently has references to, indexed by reference id
				NaN,
				0,
				null,
				true,
				false,
				global,
				this,
			];
			this._goRefCounts = new Array(this._values.length).fill(Infinity); // number of references that Go has to a JS value, indexed by reference id
			this._ids = new Map([ // mapping from JS values to reference ids
				[0, 1],
				[null, 2],
				[true, 3],
				[false, 4],
				[global, 5],
				[this, 6],
			]);
			this._idPool = [];   // unused ids that have been garbage collected
			this.exited = false; // whether the Go program has exited

			// Pass command line arguments and environment variables to WebAssembly by writing them to the linear memory.
			let offset = 4096;

			const strPtr = (str) => {
				const ptr = offset;
				const bytes = encoder.encode(str + "\\0");
				new Uint8Array(this.mem.buffer, offset, bytes.length).set(bytes);
				offset += bytes.length;
				if (offset % 8 !== 0) {
					offset += 8 - (offset % 8);
				}
				return ptr;
			};

			const argc = this.argv.length;

			const argvPtrs = [];
			this.argv.forEach((arg) => {
				argvPtrs.push(strPtr(arg));
			});
			argvPtrs.push(0);

			const keys = Object.keys(this.env).sort();
			keys.forEach((key) => {
				argvPtrs.push(strPtr(\`\${key}=\${this.env[key]}\`));
			});
			argvPtrs.push(0);

			const argv = offset;
			argvPtrs.forEach((ptr) => {
				this.mem.setUint32(offset, ptr, true);
				this.mem.setUint32(offset + 4, 0, true);
				offset += 8;
			});

			// The linker guarantees global data starts from at least wasmMinDataAddr.
			// Keep in sync with cmd/link/internal/ld/data.go:wasmMinDataAddr.
			const wasmMinDataAddr = 4096 + 4096;
			if (offset >= wasmMinDataAddr) {
				throw new Error("command line too long");
			}

			this._inst.exports.run(argc, argv);
			if (this.exited) {
				this._resolveExitPromise();
			}
			await this._exitPromise;
		}

		_resume() {
			if (this.exited) {
				throw new Error("Go program has already exited");
			}
			this._inst.exports.resume();
			if (this.exited) {
				this._resolveExitPromise();
			}
		}

		_makeFuncWrapper(id) {
			const go = this;
			return function () {
				const event = { id: id, this: this, args: arguments };
				go._pendingEvent = event;
				go._resume();
				return event.result;
			};
		}
	}

	if (
		typeof module !== "undefined" &&
		global.require &&
		global.require.main === module &&
		global.process &&
		global.process.versions &&
		!global.process.versions.electron
	) {
		if (process.argv.length < 3) {
			console.error("usage: go_js_wasm_exec [wasm binary] [arguments]");
			process.exit(1);
		}

		const go = new Go();
		go.argv = process.argv.slice(2);
		go.env = Object.assign({ TMPDIR: require("os").tmpdir() }, process.env);
		go.exit = process.exit;
		WebAssembly.instantiate(fs.readFileSync(process.argv[2]), go.importObject).then((result) => {
			process.on("exit", (code) => { // Node.js exits if no event handler is pending
				if (code === 0 && !go.exited) {
					// deadlock, make Go print error and stack traces
					go._pendingEvent = { id: 0 };
					go._resume();
				}
			});
			return go.run(result.instance);
		}).catch((err) => {
			console.error(err);
			process.exit(1);
		});
	}
})();
onmessage = ({ data: wasm }) => {
  let decoder = new TextDecoder();
  let fs = global.fs;
  let stderr = "";
  fs.writeSync = (fd, buffer) => {
    if (fd === 1) {
      postMessage(buffer);
    } else if (fd === 2) {
      stderr += decoder.decode(buffer);
      let parts = stderr.split("\\n");
      if (parts.length > 1)
        console.log(parts.slice(0, -1).join("\\n"));
      stderr = parts[parts.length - 1];
    } else {
      throw new Error("Bad write");
    }
    return buffer.length;
  };
  let stdin = [];
  let resumeStdin;
  let stdinPos = 0;
  onmessage = ({ data }) => {
    if (data.length > 0) {
      stdin.push(data);
      if (resumeStdin)
        resumeStdin();
    }
  };
  fs.read = (fd, buffer, offset, length, position, callback) => {
    if (fd !== 0 || offset !== 0 || length !== buffer.length || position !== null) {
      throw new Error("Bad read");
    }
    if (stdin.length === 0) {
      resumeStdin = () => fs.read(fd, buffer, offset, length, position, callback);
      return;
    }
    let first = stdin[0];
    let count = Math.max(0, Math.min(length, first.length - stdinPos));
    buffer.set(first.subarray(stdinPos, stdinPos + count), offset);
    stdinPos += count;
    if (stdinPos === first.length) {
      stdin.shift();
      stdinPos = 0;
    }
    callback(null, count);
  };
  let go = new global.Go();
  go.argv = ["", \`--service=\${"0.13.11"}\`];
  WebAssembly.instantiate(wasm, go.importObject).then(({ instance }) => go.run(instance));
};}`,i;if(t){let l=new Blob([c],{type:"text/javascript"});i=new Worker(URL.createObjectURL(l))}else{let m=new Function("postMessage",c+"var onmessage; return m => onmessage(m)")(k=>i.onmessage({data:k}));i={onmessage:null,postMessage:k=>m({data:k}),terminate(){}}}i.postMessage(s),i.onmessage=({data:l})=>n(l);let{readFromStdout:n,service:p}=createChannel({writeToStdin(l){i.postMessage(l)},isSync:!1,isBrowser:!0});longLivedService={build:l=>new Promise((m,k)=>p.buildOrServe({callName:"build",refs:null,serveOptions:null,options:l,isTTY:!1,defaultWD:"/",callback:(D,A)=>D?k(D):m(A)})),transform:(l,m)=>new Promise((k,D)=>p.transform({callName:"transform",refs:null,input:l,options:m||{},isTTY:!1,fs:{readFile(A,O){O(new Error("Internal error"),null)},writeFile(A,O){O(null)}},callback:(A,O)=>A?D(A):k(O)})),formatMessages:(l,m)=>new Promise((k,D)=>p.formatMessages({callName:"formatMessages",refs:null,messages:l,options:m,callback:(A,O)=>A?D(A):k(O)})),analyzeMetafile:(l,m)=>new Promise((k,D)=>p.analyzeMetafile({callName:"analyzeMetafile",refs:null,metafile:typeof l=="string"?l:JSON.stringify(l),options:m,callback:(A,O)=>A?D(A):k(O)}))}};function isURL(e){try{return new URL(e),!0}catch{return!1}}function serializeURL(e){return e.href}function parseUrlLikeImportSpecifier(e,t){if(t&&(e.startsWith("/")||e.startsWith("./")||e.startsWith("../")))try{return new URL(e,t)}catch{return null}try{return new URL(e)}catch{return null}}const specialSchemes=["ftp","file","http","https","ws","wss"];function isSpecial(e){return specialSchemes.some(t=>serializeURL(e).startsWith(t))}function resolveImportsMatch(e,t,r){for(const[s,c]of Object.entries(r))if(s===e){if(c===null)throw new TypeError("resolution of specifierKey was blocked by a null entry.");if(!isURL(c))throw new TypeError("resolutionResult must be an URL.");return c}else if(s.endsWith("/")&&e.startsWith(s)&&(t===null||isSpecial(t))){if(c===null)throw new TypeError("resolution of specifierKey was blocked by a null entry.");if(!isURL(c))throw new TypeError("resolutionResult must be an URL.");const i=e.slice(s.length);if(!c.endsWith("/"))throw new TypeError('resolutionResult does not end with "/"');try{const n=new URL(i,c);if(!isURL(n))throw new TypeError("url must be an URL.");if(!serializeURL(n).startsWith(c))throw new TypeError("resolution of normalizedSpecifier was blocked due to it backtracking above its prefix specifierKey.");return serializeURL(n)}catch{throw new TypeError("resolution of normalizedSpecifier was blocked since the afterPrefix portion could not be URL-parsed relative to the resolutionResult mapped to by the specifierKey prefix.")}}return null}function resolveModuleSpecifier(e,{imports:t={},scopes:r={}},s){const c=serializeURL(s),i=parseUrlLikeImportSpecifier(e,s),n=i!==null?serializeURL(i):e;for(const[l,m]of Object.entries(r))if(l===c||l.endsWith("/")&&c.startsWith(l)){const k=resolveImportsMatch(n,i,m);if(k!==null)return k}const p=resolveImportsMatch(n,i,t);if(p!==null)return p;if(i!==null)return serializeURL(i);throw new TypeError("specifier was a bare specifier, but was not remapped to anything by importMap.")}const loaderList=["js","jsx","ts","tsx","css","json","text","base64","file","dataurl","binary","default"];function isLoader(e){return loaderList.includes(e)}const name="remote-resource",remoteLoader=e=>({name,setup({onResolve:t,onLoad:r}){const{importmap:s={imports:{}},baseURL:c}=e??{};t({filter:/.*/},({path:i,namespace:n,importer:p,resolveDir:l})=>{const m=resolveModuleSpecifier(i,s,c);return m.startsWith("http")?(console.log({path:i,importer:p,resolveDir:l},"->",m),{path:m,namespace:name}):n===name?(console.log({importer:p,resolveDir:l},"->",new URL(m,p).toString()),{path:new URL(m,p).toString(),namespace:name}):(console.log({resolvedPath:m,resolveDir:l},"->",new URL(m,l).toString()),{path:new URL(m,l).toString()})}),r({filter:/.*/,namespace:name},async({path:i})=>{const n=await fetch(i);if(console.log(`Download ${i}`),!n.ok)throw n;return{contents:await n.text(),loader:getLoader(n)}})}});function getLoader(e){const r=e.url.split(".").pop();if(r&&isLoader(r))return r;if(r==="mjs")return"js";const s=e.headers.get("Content-Type")??"text/plain";return isLoader(s)?s:"text"}let initialized;self.addEventListener("message",async e=>{initialized??=initialize({wasmURL:"./esbuild.wasm",worker:!1}),await initialized;const{entryURL:t,...r}=e.data,s=await build({stdin:{contents:`import "${t}";`},write:!1,...r,plugins:[remoteLoader({baseURL:new URL(t)})]});self.postMessage(s.outputFiles[0].text)});
//# sourceMappingURL=data:application/json;base64,
